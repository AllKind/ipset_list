#!/bin/bash

# -----------------------------------------------------------------
# ipset set listing wrapper script
#
# https://github.com/AllKind/ipset_list
# https://sourceforge.net/projects/ipset-list/
# -----------------------------------------------------------------

# Copyright (C) 2013 AllKind (AllKind@fastest.cc)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# 
# This is the bash programmable completion for ipset_list
# (put it into ~/.bash_completion or /etc/bash_completion.d/)
#
# -----------------------------------------------------------------

# Name may be modified
ipset_list=ipset_list

# -----------------------------------------------------------------

# -----------------------------------------------------------------
# DO NOT MODIFY ANYTHING BEYOND THIS LINE!
# -----------------------------------------------------------------

shopt -s extglob

_remove_reply_entry() {
local -i x
for x in ${!COMPREPLY[@]}; do
	if [[ ${COMPREPLY[x]} = $1 ]]; then
		unset COMPREPLY[x]
		break
	fi
done
}

_ipset_list_complete() {
local -i i x
local cur prev
local sets=( $("$ipset_list" -n ) )
local opts=(-a -c -d -h -i -m -n -r -s -t)
local Copts=(-Cs -Co)
local Fopts=(-Fh -Fi -Fg -Fr)
local Hopts=(-Hr -Hs -Ht -Hv)
local Topts=(-Tm -To -Ts)
local Xopts=(-Xh -Xg -Xr)

COMPREPLY=( "${sets[@]}" )
_get_comp_words_by_ref cur || return
_get_comp_words_by_ref prev || return

#DEBUG=Y
if [[ $DEBUG ]]; then
	printf "\ncur: <%s> prev: <%s>\n" "$cur" "$prev"
	printf "COMP_WORDS:\n"
	printf "<%s>\n" "${COMP_WORDS[@]}"
fi

case "$cur" in
	-C) COMPREPLY=( ${Copts[@]} $cur )
		for i in ${!COMP_WORDS[@]}; do
			case "${COMP_WORDS[i]}" in
				-i) COMPREPLY=( -Co $cur )
					break
				;;
			esac
		done
	;;
	-F) COMPREPLY=( ${Fopts[@]} $cur ) ;;
	-H) COMPREPLY=( ${Hopts[@]} $cur ) ;;
	-T) COMPREPLY=( ${Topts[@]} $cur ) ;;
	-X) COMPREPLY=( ${Xopts[@]} $cur ) ;;
	-*) 
		if ((${#COMP_WORDS[@]} > 2)); then # these options don't allow any other
			opts=("${opts[@]/@(-n|-h)/}")
		fi
		COMPREPLY=( ${opts[@]} ${Copts[@]} ${Fopts[@]} ${Hopts[@]} ${Topts[@]} ${Xopts[@]} )
		# some options don't allow others
		for i in ${!COMP_WORDS[@]}; do
			case "${COMP_WORDS[i]}" in
				-a) COMPREPLY=( -c -d -r -s ${Copts[@]} ${Fopts[@]} ${Hopts[@]} ${Topts[@]} ${Xopts[@]} $cur )
					break
				;;
				-i) COMPREPLY=( -Co -d -r -s $cur )
					break
				;;
				-m) COMPREPLY=( -c -d -r -s ${Copts[@]} ${Fopts[@]} ${Hopts[@]} ${Topts[@]} $cur )
					break
				;;
				-t) COMPREPLY=( -c ${Copts[@]} ${Fopts[@]} ${Hopts[@]} ${Topts[@]} ${Xopts[@]} $cur )
					break
				;;
				-h|-n) COMPREPLY=()
					break
				;;
			esac
		done
		case "$prev" in # options that need a value we can't predict
			@(-@(d|h|n|Fg|Fh|Fi|Fr|Ht|Hr|Hs|Hv|Mc|To|Xg|Xh|Xr))) COMPREPLY=() ;;
		esac
	;;
	*) # not an option was requested
		COMPREPLY=( $( compgen -W '${COMPREPLY[@]}' $cur ) )
		case "$prev" in
			-Xh) # retrieve list of headers
			   	COMPREPLY=()
				while read -r; do
					[[ $REPLY = Name ]] && continue
					COMPREPLY[${#COMPREPLY[@]}]="$REPLY"
				done < <( "$ipset_list" -t "${sets[0]}" | awk -F: '{ print $1 }' )
				compopt -o nospace
				IFS=$'\n'
				COMPREPLY=( $( compgen -P '"' -S ':*"' -W '${COMPREPLY[@]}' $cur ) )
			;;
			@(-@(d|h|n|Fg|Fh|Fi|Fr|Ht|Hr|Hs|Hv|Mc|To|Xg|Xh|Xr))) COMPREPLY=() ;;
		esac
esac
if ((${#COMPREPLY[@]})); then # post process the reply
	for i in ${!COMP_WORDS[@]}; do # mutual exclusive options
		case "${COMP_WORDS[i]}" in
			-Fg)
			   	_remove_reply_entry "-Fr"
			   	_remove_reply_entry "-Xg"
			   	_remove_reply_entry "-Xr"
		   	;;
			-Fr)
			   	_remove_reply_entry "-Fg"
			   	_remove_reply_entry "-Xg"
			   	_remove_reply_entry "-Xr"
			;;
			-Xg)
			   	_remove_reply_entry "-Fg"
			   	_remove_reply_entry "-Fr"
			   	_remove_reply_entry "-Xr"
			;;
			-Xr)
			   	_remove_reply_entry "-Fg"
			   	_remove_reply_entry "-Fr"
			   	_remove_reply_entry "-Xg"
			;;
		esac
	done
	for i in ${!COMP_WORDS[@]}; do # remove options that can only be used once
		if [[ ${COMP_WORDS[i]} = @(-|-@(Fh|Fi|Xh)) ]]; then
			continue
		else
			for x in ${!COMPREPLY[@]}; do
				if [[ ${COMP_WORDS[i]} = ${COMPREPLY[x]} ]]; then
					unset COMPREPLY[$x]
					break
				fi
			done
		fi
	done
fi
if [[ $DEBUG ]]; then
	printf "COMPREPLY:\n"
	printf "<%s>\n" "${COMPREPLY[@]}"
fi
}
complete -F _ipset_list_complete "$ipset_list"

